name: CI/CD Pipeline for E-Commerce Microservices

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    name: Build and Test All Services
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Product Service
        run: |
          cd product-service
          mvn clean package -DskipTests
        
      - name: Test Product Service
        run: |
          cd product-service
          mvn test

      - name: Build Order Service
        run: |
          cd order-service
          mvn clean package -DskipTests

      - name: Test Order Service
        run: |
          cd order-service
          mvn test

      - name: Build Payment Service
        run: |
          cd payment-service
          mvn clean package -DskipTests

      - name: Test Payment Service
        run: |
          cd payment-service
          mvn test

      - name: Build Notification Service
        run: |
          cd notification-service
          mvn clean package -DskipTests
        
      - name: Test Notification Service
        run: |
          cd notification-service
          mvn test

      - name: Build User Service
        run: |
          cd user-service
          mvn clean package -DskipTests
        
      - name: Test User Service
        run: |
          cd user-service
          mvn test

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: service-jars
          path: |
            product-service/target/*.jar
            order-service/target/*.jar
            payment-service/target/*.jar
            notification-service/target/*.jar
            user-service/target/*.jar

  build-docker-images:
    name: Build Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Product Service Image
        run: |
          docker build -t ecommerce/product-service:latest ./product-service

      - name: Build Order Service Image
        run: |
          docker build -t ecommerce/order-service:latest ./order-service

      - name: Build Payment Service Image
        run: |
          docker build -t ecommerce/payment-service:latest ./payment-service

      - name: Build Notification Service Image
        run: |
          docker build -t ecommerce/notification-service:latest ./notification-service

      - name: Build User Service Image
        run: |
          docker build -t ecommerce/user-service:latest ./user-service

      - name: Build Frontend Image
        run: |
          docker build -t ecommerce/frontend:latest ./frontend

      - name: Save Docker Images
        run: |
          docker save ecommerce/product-service:latest -o product-service.tar
          docker save ecommerce/order-service:latest -o order-service.tar
          docker save ecommerce/payment-service:latest -o payment-service.tar
          docker save ecommerce/notification-service:latest -o notification-service.tar
          docker save ecommerce/user-service:latest -o user-service.tar
          docker save ecommerce/frontend:latest -o frontend.tar

      - name: Upload Docker Images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            product-service.tar
            order-service.tar
            payment-service.tar
            notification-service.tar
            user-service.tar
            frontend.tar

  deploy-local:
    name: Deploy to Local Docker Environment
    needs: build-docker-images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          docker load -i product-service.tar
          docker load -i order-service.tar
          docker load -i payment-service.tar
          docker load -i notification-service.tar
          docker load -i user-service.tar
          docker load -i frontend.tar

      - name: Start Services with Docker Compose
        run: |
          docker compose up -d

      - name: Wait for Services to Start
        run: |
          echo "Waiting for services to start..."
          sleep 30

      - name: Health Check - Product Service
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8081/api/products || exit 1

      - name: Health Check - Order Service
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8082/api/orders || exit 1

      - name: Health Check - Payment Service
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8083/api/payments || exit 1

      - name: Health Check - Notification Service
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8084/api/notifications || exit 1

      - name: Health Check - User Service
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8085/api/users || exit 1

      - name: Health Check - Frontend
        run: |
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:3000 || exit 1

      - name: Test User Registration
        run: |
          echo "Testing user registration endpoint..."
          curl -X POST http://localhost:8085/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{"username":"testuser","email":"test@example.com","password":"Test123!","firstName":"Test","lastName":"User"}' \
            -w "\nHTTP Status: %{http_code}\n" || exit 1

      - name: Test User Login
        run: |
          echo "Testing user login endpoint..."
          RESPONSE=$(curl -s -X POST http://localhost:8085/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"Test123!"}')
          echo "Login Response: $RESPONSE"
          if echo "$RESPONSE" | grep -q "token"; then
            echo "Login successful - token received!"
          else
            echo "Login failed - no token in response"
            exit 1
          fi

      - name: Run Integration Tests
        run: |
          echo "All services are healthy and running!"
          docker compose ps

      - name: Show Service Logs
        if: failure()
        run: |
          docker compose logs

      - name: Stop Services
        if: always()
        run: |
          docker compose down -v
